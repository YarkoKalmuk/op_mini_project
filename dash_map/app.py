import math
import dash
from dash import html, dcc
from dash.dependencies import Input, Output, State
import dash_leaflet as dl
import pandas as pd
import dash_bootstrap_components as dbc

from assets.layout import index_page, page_1_layout, page_2_layout, page_3_layout, select_top_200
from find_shelter_algo import compute_route  # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É

import sqlite3

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–∫—Ä–∏—Ç—Ç—ñ–≤
filepath = './shelters_coords.csv'
shelters_df = pd.read_csv(filepath)
shelters_df = shelters_df.dropna(subset=['latitude', 'longitude'])
shelters_df = shelters_df.drop(columns=['account_number', 'ability_to_publish_information', 'district', 'community'])
shelters_df.loc[shelters_df['type_of_room'] == '–°—Ö–æ–≤–∏—â–µ', 'colour'] = 'red'
shelters_df.loc[shelters_df['type_of_room'] != '–°—Ö–æ–≤–∏—â–µ', 'colour'] = 'blue'

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–æ–¥–∞—Ç–∫—É
app = dash.Dash(__name__, suppress_callback_exceptions=True)
server = app.server

app.layout = html.Div([
    dcc.Location(id='url', refresh=False),
    dcc.Store(id='bounds-store'),
    html.Div(id='page-content')
])


conn = sqlite3.connect('./instance/shelters.sqlite')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS reviews (
    shelter_id VARCHAR(128) NOT NULL,
    review_text VARCHAR(256) NOT NULL
)
''')
conn.close()


# üìÑ –†–æ—É—Ç–∏–Ω–≥ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏
@app.callback(
    Output('page-content', 'children'),
    Input('url', 'pathname')
)
def display_page(pathname):
    if pathname == '/page-1':
        return page_1_layout
    if pathname == '/page-2':
        return page_2_layout
    if pathname == '/review':
        return page_3_layout  # –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏
    return index_page

# üó∫Ô∏è –û–Ω–æ–≤–ª–µ–Ω–Ω—è –º–µ–∂ –∫–∞—Ä—Ç–∏
@app.callback(
    Output('bounds-store', 'data'),
    Input('map', 'bounds')
)
def update_bounds(bounds):
    if bounds:
        return {
            'south': bounds[0][0], 'west': bounds[0][1],
            'north': bounds[1][0], 'east': bounds[1][1]
        }
    return {}

# üß≠ –ú–∞—Ä–∫–µ—Ä–∏ —É–∫—Ä–∏—Ç—Ç—ñ–≤
@app.callback(
    Output("shelter-layer", "children"),
    Input("bounds-store", "data")
)
def update_shelter_markers(bounds):
    global shelters_df
    shelter_markers = select_top_200(shelters_df, bounds)
    return [
        dl.CircleMarker(center=[row['latitude'], row['longitude']],
                        radius=3 * math.log(row['capacity_of_persons'] / 20),
                        color=row['colour'],
                        fillOpacity=0.6,
                        children=[
                            dl.Tooltip(f"{row['type_of_room']}, "
                                       f"{row['street']} {row['building_number']}, "
                                       f"–º—ñ—Å—Ç–∫—ñ—Å—Ç—å: {row['capacity_of_persons']}"),
                            # –î–æ–¥–∞—î–º–æ –ª—ñ–Ω–∫ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤
                            dl.Popup([
                                html.A(f"–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤—ñ–¥–≥—É–∫—ñ–≤", href=f"/review?shelter_id={row['street']}_{row['building_number']}")
                            ])
                        ])
        for _, row in shelter_markers.iterrows()
    ]

# üîê –õ–æ–≥—ñ–Ω
@app.callback(
    Output("login-output", "children"),
    Input("login-button", "n_clicks"),
    State("username", "value"),
    State("password", "value"),
    prevent_initial_call=True
)
def validate_login(n_clicks, username, password):
    if username == "admin" and password == "password":
        return "Login successful! Redirecting..."
    return "Invalid credentials. Try again."

@app.callback(
    Output("route", "children"),
    Output("route-message", "children"),
    Input("find-route-btn-main", "n_clicks"),
    State("address-input", "value"),
    prevent_initial_call=True
)
def handle_route_on_main(n_clicks, address):
    if not address:
        return [], "‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É."
    try:
        name, minutes, coords = compute_route(address, 'shelters_coords.csv')
        if name is None and coords is None:
            return [], "‚ùó –ü–æ—á–∞—Ç–∫–æ–≤–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ –±—É–ª–∞ –∑–Ω–∞–π–¥–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        if not coords or len(coords) < 2:
            return [], "‚ö†Ô∏è –£–∫—Ä–∏—Ç—Ç—è –∑–∞–Ω–∞–¥—Ç–æ –±–ª–∏–∑—å–∫–æ. –ü–æ–±—É–¥–æ–≤–∞–Ω–æ –ø—Ä—è–º—É –ª—ñ–Ω—ñ—é."
        start = coords[0]
        end = coords[-1]
        return [
            [
                dl.Polyline(positions=coords, color='red', weight=5),
                dl.Marker(position=start, children=dl.Tooltip("–í–∏ —Ç—É—Ç üßç")),
                dl.Marker(position=end, children=dl.Tooltip(f"–£–∫—Ä–∏—Ç—Ç—è: {name} (‚âà {minutes} —Ö–≤) üõ°Ô∏è"))
            ],
            ""
        ]
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        return [], "üö´ –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –º–∞—Ä—à—Ä—É—Ç—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∞–¥—Ä–µ—Å—É –∞–±–æ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."


@app.callback(
    Output('reviews-container', 'children'),
    Input('url', 'pathname'),
    State('url', 'search')
)
def display_reviews(pathname, search):
    if pathname == '/review':
        # –¢—É—Ç –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ id —É–∫—Ä–∏—Ç—Ç—è –∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        shelter_id = search.split('=')[1] if search else ''
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –∞–±–æ –∑ —ñ–Ω—à–æ–≥–æ –¥–∂–µ—Ä–µ–ª–∞
        reviews = get_reviews(shelter_id)
        return html.Div([html.P(review) for review in reviews])
    return []

def get_reviews(shelter_id):
    conn = sqlite3.connect('./instance/shelters.sqlite')
    cursor = conn.cursor()
    all_reviews = cursor.execute('SELECT * FROM reviews WHERE shelter_id = ?', (shelter_id,)).fetchall()
    reviews = []
    for review in all_reviews:
        reviews.append(review[1])
    conn.close()
    return reviews

@app.callback(
    Output('new-review', 'value'),
    Input('submit-review', 'n_clicks'),
    State('new-review', 'value'),
    State('url', 'search'),
    prevent_initial_call=True
)
def submit_review(n_clicks, review_text, search):
    if n_clicks > 0 and review_text:
        shelter_id = search.split('=')[1] if search else ''
        # –¢—É—Ç –¥–æ–¥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
        save_review(review_text, shelter_id)
        return ''  # –û—á–∏—â–∞—î–º–æ –ø–æ–ª–µ –≤–≤–æ–¥—É –ø—ñ—Å–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤—ñ–¥–≥—É–∫—É
    return review_text

def save_review(review_text, shelter_id):
    conn = sqlite3.connect('./instance/shelters.sqlite')
    cursor = conn.cursor()
    cursor.execute('INSERT INTO reviews VALUES (?, ?)', (shelter_id, review_text,))
    conn.commit()
    print(f"Saving review: {review_text}")
    # –¢–∏ –º–æ–∂–µ—à –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤—ñ–¥–≥—É–∫–∏ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, —Ç—É—Ç –ø—Ä–∏–∫–ª–∞–¥ –∑ –≤–∏–≤–µ–¥–µ–Ω–Ω—è–º –≤ –∫–æ–Ω—Å–æ–ª—å.
    conn.close()



if __name__ == "__main__":
    app.run(debug=True)
